"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/12/29/how-to-build-high-performance-front-end-applications-based-on-multi-processing","metadata":{"permalink":"/blog/2023/12/29/how-to-build-high-performance-front-end-applications-based-on-multi-processing","editUrl":"https://github.com/unadlib/reactant/tree/master/website/blog/2023-12-29-how-to-build-high-performance-front-end-applications-based-on-multi-processing/index.md","source":"@site/blog/2023-12-29-how-to-build-high-performance-front-end-applications-based-on-multi-processing/index.md","title":"How to build high-performance front-end applications based on multi-processing","description":"Motivation","date":"2023-12-29T00:00:00.000Z","formattedDate":"December 29, 2023","tags":[{"label":"reactant","permalink":"/blog/tags/reactant"}],"readingTime":9.1,"hasTruncateMarker":false,"authors":[{"name":"unadlib"}],"frontMatter":{"title":"How to build high-performance front-end applications based on multi-processing","author":"unadlib","tags":["reactant"]},"nextItem":{"title":"How to make Web application support multiple browser windows","permalink":"/blog/2021/10/03/how-to-make-web-application-support-multiple-browser-windows"}},"content":"## Motivation\\n\\nAs modern front-end applications become larger, making full use of the device\'s CPU multi-cores to improve performance may become an important trend.\\n\\nFront-end applications often run in a single browser window, and JavaScript runs on a single thread. This means that common web applications cannot take full advantage of a CPU\'s multiple-cores. As applications become larger and more complex, this can lead to performance problems and a poor user experience.\\n\\nHowever, there is good news (the gradual phasing out of IE and Safari v16 support for Shared Worker). Modern browsers widely support various types of Workers, including Shared Workers. Shared Workers are a mature technology that allows multiple threads of JavaScript code to share data and communicate with each other. This makes them ideal for building multi-process front-end applications.\\n\\nMulti-process front-end applications have several benefits. They can better resolve computation-intensive and slow-running JavaScript, which can improve performance and fluidity. They can also increase the number of concurrent requests that can be processed, which can improve the responsiveness of the application.\\n\\nSo we aim to explore a Web application framework that leverages multi-processing.\\n\\n## Web application with Multi-Processing\\n\\nIn a multi-process web architecture, we can leverage the Shared Web Apps concept of reactant-share to extend general multi-process programming.\\n\\nShared Web Apps allows running web applications in multiple browser windows or workers. It uses a unique front-end server (like a Shared Worker) to share web apps, whether it\'s code sharing, local storage sharing, state sharing, and so on. Regardless of how many browser windows are opened, there\'s always only one server application instance shared among multiple client applications for the Shared Web Apps. It enables Web Tabs to only perform rendering separation, thus making better use of the device\'s multi-cores and ensuring smooth operation of the web application.\\n\\nShared Web Apps provides the following benefits:\\n\\n- Reduces the mental burden of multi-process programming by implementing Isomorphism with a universal modular model. Isomorphism is the ability to execute the same code on both the server process, client process or other process, which simplifies multi-process programming.\\n- Ensures smooth operation of the front-end server process by transferring compute-intensive tasks to another process. This frees up the front-end server process to focus on business logic and the client process to focus on rendering, which improves performance and responsiveness.\\n- Improves request concurrency by using a better multi-process model. This allows the web application to handle more requests simultaneously.\\n\\n## Coworker based on reactant-share\\n\\nBased on reactant-share, we have implemented the Coworker model, which facilitates state sharing across multiple processes, synchronizes state, and minimizes state changes with patches to ensure optimal performance in multi-process execution.\\n\\n![Workflow](./workflow.png)\\n\\nThe Coworker model consists of three types of processes:\\n\\n- Client Process: The rendering process, which accepts shared state and only renders the web UI. It is lightweight to ensure smooth rendering.\\n- Server Process: The main process, which executes most of the application business logic. It should also ensure smooth running.\\n- Coworker Process: The process responsible for compute-intensive business or request-intensive logic. This process frees up the server process to focus on business logic. The server process can reduce blocking caused by JavaScript and is less susceptible to the effects of request-intensive logic.\\n\\nIn \\"Base\\" mode, Reactant Shared Apps has only two processes: the Tab process and the Coworker process. The Coworker process uses a Web Worker by default.\\n\\n## Implementation of Coworker\\n\\nFor the related principles of Reactant-Share, please see the following link: https://reactant.js.org/blog/2021/10/03/how-to-make-web-application-support-multiple-browser-windows\\n\\nCoworker consists of two modules:\\n\\n- **CoworkerAdapter**: Provides transport for communication between the server process and the coworker process.\\n- **CoworkerExecutor**: Handles synchronization of shared state between processes and custom Coworker type modules (used for proxy execution of coworkers). Coworkers are synchronously sent to the main process in one direction. Each time a Coworker syncs its state, it carries a sequence tag. If the sequence is abnormal, a complete Coworker state synchronization is triggered automatically to ensure the consistency of the shared state between the Coworker and the main process.\\n\\n## Core Concepts and Advantages of Coworker\\n\\n- **Isomorphism**: All processes execute the same code, which enhances the maintainability of multi-process programming in JavaScript.\\n- **Process Interaction based on the Actor Model**: Relying on the Actor model, this method reduces the cognitive load of multi-process programming in JavaScript.\\n- **Generic Transport Model**: Coworker supports any transport based on data-transport (https://github.com/unadlib/data-transport), so it can run in any container that supports transport, including SharedWorker. The following is a list of supported transports:\\n  - iframe\\n  - Broadcast\\n  - Web Worker\\n  - Service Worker\\n  - Shared Worker\\n  - Browser Extension\\n  - Node.js\\n  - WebRTC\\n  - Electron\\n  - Any other port based on data-transport\\n- **High Performance Based on Mutative**: [Mutative](https://github.com/unadlib/mutative) is faster than the naive handcrafted reducer and 10x faster than Immer. Updates to immutable data based on Mutative also maintain good performance. The patches obtained from the shared state update are used for state synchronization.\\n- **High Performance**: Due to Coworker taking on a large number of requests and compute-intensive tasks, the main process and rendering process maintain extremely high performance and user experience.\\n- **Support for Large Applications**: Reactant provides a complete module model design, including dependency injection and class first, as well as various modular design and dynamic module injections.\\n- **Separation of Service and Rendering View Modules**: Service modules, which are primarily based on business logic, can execute separately from view modules. This not only achieves separation of concerns but also allows the process to have its own containerization.\\n- **Graceful Degradation**\uff1a If the JavaScript host environment does not support SharedWorker, Coworker reverts to a regular SPA. This does not affect the behavior of any current application.\\n\\n## API\\n\\n`spawn()` - It will forward execution to the module and specified function proxies in Coworker, inspired by the Actor model.\\n\\n## Examples\\n\\nWe will create a Counter application with Coworker based on the \u2018Base\u2018 pattern.\\n\\n1. Firstly, create app.tsx that contains the ProxyCounter module which needs to be executed in Coworker.\\n\\nIts calling method `spawn(this.proxyCounter, \'increase\', [])` is exactly the same as that of general Shared Web Apps. Whether it will be executed with a proxy in Coworker depends on the configuration of createApp.\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  ViewModule,\\n  injectable,\\n  useConnector,\\n  action,\\n  state,\\n  spawn,\\n} from \\"reactant-share\\";\\n\\n@injectable({\\n  name: \\"ProxyCounter\\",\\n})\\nexport class ProxyCounter {\\n  @state\\n  count = 0;\\n\\n  @action\\n  increase() {\\n    this.count += 1;\\n  }\\n}\\n\\n@injectable({\\n  name: \\"AppView\\",\\n})\\nexport class AppView extends ViewModule {\\n  constructor(public proxyCounter: ProxyCounter) {\\n    super();\\n  }\\n\\n  @state\\n  count = 0;\\n\\n  @action\\n  increase() {\\n    this.count += 1;\\n  }\\n\\n  component(this: AppView) {\\n    const [count, proxyCount] = useConnector(() => [\\n      this.count,\\n\\n      this.proxyCounter.count,\\n    ]);\\n\\n    return (\\n      <>\\n        <div>{count}</div>\\n        <button type=\\"button\\" onClick={() => spawn(this, \\"increase\\", [])}>\\n          +\\n        </button>\\n        <p>proxy in coworker</p>\\n        <div>{proxyCount}</div>\\n        <button\\n          type=\\"button\\"\\n          onClick={() => spawn(this.proxyCounter, \\"increase\\", [])}\\n        >\\n          +\\n        </button>\\n      </>\\n    );\\n  }\\n}\\n```\\n\\n2. Create the main file `index.ts`. Here, we set `ProxyCounter` as a module of Coworker, and set `isCoworker` to `false`.\\n\\n```tsx\\nimport { render } from \'reactant-web\';\\nimport {\\n  createSharedApp,\\n  Coworker,\\n  CoworkerOptions,\\n  ICoworkerOptions,\\n} from \'reactant-share\';\\nimport { AppView, ProxyCounter } from \'./app\';\\n\\ncreateSharedApp({\\n  modules: [\\n    Coworker,\\n    {\\n      provide: CoworkerOptions,\\n      useValue: {\\n        useModules: [ProxyCounter],\\n        worker: new Worker(new URL(\'./coworker.ts\', import.meta.url)),\\n        isCoworker: false,\\n      } as ICoworkerOptions,\\n    },\\n  ],\\n  main: AppView,\\n  render,\\n  share: {\\n    name: \'SharedWorkerApp\',\\n    type: \'Base\',\\n  },\\n}).then((app) => {\\n  app.bootstrap(document.getElementById(\'app\'));\\n  window.app = app;\\n});\\n```\\n\\n3. Create the Coworker file `coworker.ts`. Here, we also set ProxyCounter as a module of Coworker, but set `isCoworker` to `true`.\\n\\n```tsx\\nimport {\\n  createSharedApp,\\n  Coworker,\\n  CoworkerOptions,\\n  ICoworkerOptions,\\n} from \'reactant-share\';\\nimport { AppView, ProxyCounter } from \'./app\';\\n\\ncreateSharedApp({\\n  modules: [\\n    Coworker,\\n    {\\n      provide: CoworkerOptions,\\n      useValue: {\\n        useModules: [ProxyCounter],\\n        isCoworker: true,\\n      } as ICoworkerOptions,\\n    },\\n  ],\\n  main: AppView,\\n  render: () => {},\\n  share: {\\n    name: \'SharedWorkerApp\',\\n    type: \'Base\',\\n  },\\n}).then((app) => {\\n  self.app = app;\\n});\\n```\\n\\nSo far, we have completed a basic application with a Coworker. Users trigger the `spawn(this.proxyCounter, \'increase\', [])` in the main process via the UI. It will be forwarded to the coworker to execute the increase function of proxyCounter, and the shared state will automatically synchronize back to the main process. The rendering update is completed by the `useConnector()` Hook.\\n\\n## Q&A\\n\\n**1. What are the challenges of multi-process programming with Coworker based on reactant-share?**\\n\\nState sharing and synchronization among processes in multi-process programming are relatively complex. Fortunately, Reactant-share ensures robustness through a shared state design with consistency. The dependencies between isomorphic modules of Coworker should also be taken into account. In development, concepts such as Domain-Driven Design should be practiced as much as possible to avoid incorrect module design.\\n\\n**2. What are the possible use case types for Coworker?**\\n\\n- **Request Queue** - Coworker is particularly suitable for modules with intensive requests. Running these in Coworker ensures they don\'t occupy the main process\'s request queue, allowing other main process requests to execute.\\n- **Large Task Execution Blocking** - When a computationally intensive task is executed, the application\'s main process should not be blocked. Such tasks are well suited for asynchronous execution in Coworker.\\n- **Isolatable Modules** - Coworker can also be used as a sandbox to isolate execution of some modules.\\n\\n**3. Are there any specific examples to demonstrate that Coworkers can improve application performance?**\\n\\nIn production, we\'ve introduced Coworker into some specific scenarios for modules related to large data volume text matching. It resulted in a substantial performance improvement, even up to 10x more, significantly enhancing the user experience.\\n\\nSuch computationally intensive text matching used to require users to wait more than 1s in the past, with the webpage being completely blocked. However, after using Coworker, the webpage blockage was reduced to less than 100ms (of course, the actual degree of improvement varies with different data sizes).\\n\\n**4. Is Coworker usable across different browsers, or does it only support within browser tabs? Can Coworker be used across tabs in different domains?**\\n\\nCoworker is a multi-process model based on reactant-share, and reactant-share is based on data-transport. Therefore, we only need to use WebRTC transport from data-transport in CoworkerAdapter within Coworker to achieve cross-browser support. Additionally, to support usage across tabs in different domains, we can implement the use of Coworker under cross-domain tabs with an approach using iframe + shared worker.\\n\\n## Conclusion\\n\\nFront-end development is at a turning point, driven by advances in front-end technology and browser capabilities. Multi-core CPUs and multi-process tools such as Shared Workers and other Workers are now being used to great effect in front-end development. The emergence of Shared Web Apps with Coworker introduces a new multi-process model for front-end applications, which significantly improves application performance, user experience, and code maintainability. For developers, this means more technical choices and challenges, but also more opportunities and potential.\\n\\nMulti-process programming for front-end applications is likely to become a key solution for improving front-end performance. This would result in a smoother, more efficient, and more responsive user experience.\\n\\n- reactant-share Document\uff1ahttps://reactant.js.org/docs/shared-app\\n- reactant-share Repo: https://github.com/unadlib/reactant/tree/master/packages/reactant-share"},{"id":"/2021/10/03/how-to-make-web-application-support-multiple-browser-windows","metadata":{"permalink":"/blog/2021/10/03/how-to-make-web-application-support-multiple-browser-windows","editUrl":"https://github.com/unadlib/reactant/tree/master/website/blog/2021-10-03-how-to-make-web-application-support-multiple-browser-windows/index.md","source":"@site/blog/2021-10-03-how-to-make-web-application-support-multiple-browser-windows/index.md","title":"How to make Web application support multiple browser windows","description":"Motivation","date":"2021-10-03T00:00:00.000Z","formattedDate":"October 3, 2021","tags":[{"label":"reactant","permalink":"/blog/tags/reactant"}],"readingTime":13.955,"hasTruncateMarker":false,"authors":[{"name":"unadlib"}],"frontMatter":{"title":"How to make Web application support multiple browser windows","author":"unadlib","tags":["reactant"]},"prevItem":{"title":"How to build high-performance front-end applications based on multi-processing","permalink":"/blog/2023/12/29/how-to-build-high-performance-front-end-applications-based-on-multi-processing"},"nextItem":{"title":"Reactant - A framework for building React web applications","permalink":"/blog/2020/08/09/reactant-a-framework-for-building-react-web-applications"}},"content":"## Motivation\\n\\nWhen we develop a Single-Page Application, we usually only define its behavior in a single browser window, and even if the same application is opened on multiple browser windows, in most cases it is only synchronized with the local storage, and the state of each application in each window is not synchronized in real time (unless the server synchronizes), they run in isolation and are relatively independent.\\n\\nHowever, this means that more browser windows will generate more and more independent application instances, which may have different UI states and often inevitably have the same network requests or WebSocket connections, which may also mean a bad user experience (as users may have become accustomed to) and excessive usage of server resources.\\n\\nSo what does it mean to have applications that supports multiple browser windows?\\n\\n- Application instance sharing: code sharing, local storage sharing, state sharing, and more\\n- Lower server resource usage\\n- Better user consistency experience\\n- Smoother web applications\\n\\nBut it\'s not easy to keep large Web applications running smoothly.\\n\\nWeb applications are still primarily built in JavaScript, which is a single-threaded programming language, and slow JavaScript code can prevent the browser\u2019s rendering. The good news is that mainstream browsers are gradually supporting more different types of workers, especially Service Workers, which are used to implement PWAs (Progressive Web Apps) that greatly enhance the user experience. And the latest modern browsers also provide Web Worker, Shared Worker. With IE becoming deprecated this year, there is [good support for these workers](https://caniuse.com/?search=worker).\\n\\nSo what does it mean for Web applications to be \\"multi-threaded\\" with Worker?\\n\\n\\"[The State Of Web Workers In 2021](https://www.smashingmagazine.com/2021/06/web-workers-2021/)\\" post covers a number of unpredictable performance issues. With these browser workers we will likely be better able to deal with computationally complex and slow-running JS code to keep web applications smooth.\\n\\nIt\'s time to rethink why we can\'t make web applications support multiple browser windows and improve the performance of web applications. New architectural requirements bring new framework requirements, and such applications we call it **`Shared Web Apps`**.\\n\\n## Shared Web Apps\\n\\nEven though we want users to open as few application windows as possible, the fact remains that many users will open the same application in multiple browser windows.\\n\\nShared Web Apps supports running web applications in multiple browser windows.\\n\\nIt has a unique Server thread to share the Shared Web Apps, whether it\'s code sharing, local storage sharing, state sharing, and so on. No matter how many browser windows are opened, Shared Web Apps always has only one server app instance for multiple client apps sharing. We all know that DOM operations are expensive. In Shared Web Apps, the client app instance is only responsible for rendering, and except for state sync the client app will become very lightweight and almost all business logic will run in the server app.\\n\\n- The client app only renders UI, making better use of the device\'s multiple cores to ensure that the client app is smooth\\n- Solve the problems caused by multiple browser windows\\n- Better separation of concerns\\n\\n## reactant-share - A framework for building Shared Web Apps\\n\\nTo build such Shared Web Apps, `reactant-share` was created. reactant-share is based on the `reactant` framework and `react` library, which supports the following features.\\n\\n- Dependency injection\\n- Immutable state management\\n- View module\\n- Redux plug-in module\\n- Test bed for unit testing and integration testing\\n- Routing module\\n- Persistence module\\n- Module dynamics\\n- Shared web app support multiple browser windows\\n  - Shared tab\\n  - SharedWorker\\n  - Detached window\\n  - iframe\\n\\n`reactant-share` is very easy to use, you can use it to quickly build a Shared Web Apps. it greatly reduces the complexity of supporting multi-browser window application architecture.\\n\\n## How it works\\n\\nWhen reactant-share starts, it creates a server app instance and multiple client app instances (one per browser window) in the browser, but the only instance that is really running in full is the server app instance, which is responsible for almost all of the application\'s logic, and multiple client app instances simply synchronize state and render. The state model of reactant-share uses immutable state, and reactant is based on Redux, so we trigger state sync from server app to client app via Redux\'s `dispatch`.\\n\\n![workflow](./workflow.jpg)\\n\\n1. The user triggers the client app proxy method through DOM events\\n2. This proxy method is executed on the server app.\\n3. The server app state is synchronized back to the client app.\\n\\n### Example\\n\\nThe overall workflow of the reactant-share is shown in the figure below. Here is an example of a shared-worker type counter app.\\n\\n- First, we define a counter app module and view module in `app.view.tsx`\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  ViewModule,\\n  createApp,\\n  injectable,\\n  useConnector,\\n  action,\\n  state,\\n  spawn,\\n} from \\"reactant-share\\";\\n\\n@injectable({ name: \\"counter\\" })\\nclass Counter {\\n  @state\\n  count = 0;\\n\\n  @action\\n  increase() {\\n    this.count += 1;\\n  }\\n}\\n\\n@injectable()\\nexport class AppView extends ViewModule {\\n  constructor(public counter: Counter) {\\n    super();\\n  }\\n\\n  component() {\\n    const count = useConnector(() => this.counter.count);\\n    return (\\n      <button type=\\"button\\" onClick={() => spawn(this.counter, \\"increase\\", [])}>\\n        {count}\\n      </button>\\n    );\\n  }\\n}\\n```\\n\\n- Next, we use `createSharedApp()` to create the client app, whose options must contain `workerURL`, the worker url that will create a shared worker (if it hasn\'t been created yet).\\n\\n```tsx\\nimport { render } from \\"reactant-web\\";\\nimport { createSharedApp } from \\"reactant-share\\";\\nimport { AppView } from \\"./app.view\\";\\n\\ncreateSharedApp({\\n  modules: [],\\n  main: AppView,\\n  render,\\n  share: {\\n    name: \\"SharedWorkerApp\\",\\n    port: \\"client\\",\\n    type: \\"SharedWorker\\",\\n    workerURL: \\"worker.bundle.js\\",\\n  },\\n}).then((app) => {\\n  // render only\\n  app.bootstrap(document.getElementById(\\"app\\"));\\n});\\n```\\n\\n- Finally, we just create the worker file `worker.tsx` and build it as `worker.bundle.js` for the `workerURL` option.\\n\\n```tsx\\nimport { createSharedApp } from \\"reactant-share\\";\\nimport { AppView } from \\"./app.view\\";\\n\\ncreateSharedApp({\\n  modules: [],\\n  main: AppView,\\n  render: () => {\\n    //\\n  },\\n  share: {\\n    name: \\"SharedWorkerApp\\",\\n    port: \\"server\\",\\n    type: \\"SharedWorker\\",\\n  },\\n}).then((app) => {\\n  // render less\\n});\\n```\\n\\nThe specific workflow of `increase` looks like this.\\n\\n1. The user clicks the button in client app.\\n2. `spawn(this.counter, \\"increase\\", [])` will be executed, which passes the parameters about the proxy execution to the server app.\\n3. The server app will execute `this.counter.increase()`, and sync the updated state back to each client apps.\\n\\n`spawn()` in reactant-share is inspired by the [actor model](https://en.wikipedia.org/wiki/Actor_model).\\n\\n## reactant-share Framework\\n\\n### Multiple modes\\n\\n- Shared tab - It is suitable for running in browsers that do not support SharedWorker. The server app is an instance with rendering that also runs in a browser window. In multiple browser windows, there is also only one server app, and after it is closed or refreshed, one instance of the other client apps will be converted to a server app.\\n- SharedWorker - If there is no [browser compatibility](https://caniuse.com/?search=sharedworker) requirement, reactant-share is highly recommended to use this mode, and reactant-share also does a graceful degradation, so if the browser does not support SharedWorker then the app will run in Shared-Tab mode.\\n- Detached window - reactant-share allows sub-applications to run as Detached windows or to be quickly merged into a more complete application.\\n- iframe - reactant-share allows each child application to run on an iframe.\\n\\nExample repo: [SharedWorker/Detached window/iframe](https://github.com/unadlib/reactant/tree/master/examples/reactant-share-sharedworker)\\n\\n### User Experience\\n\\nSince reactant-share\'s multiple instances are logic-sharing and state-sharing, when a user opens the same reactant-share application in multiple browser windows, the only instance that is actually running in full is the server app.\\n\\nThe rendering-only client app will be so smooth that it will almost never freeze due to JS code, and the consistent application state will allow users to switch between multiple browser windows without any worries.\\n\\n### Development Experience\\n\\nreactant-share provides CLI and full support for Typescript, as well as support for Shared-Tab, SharedWorker, and other different types of runtime modes out of the box. Built-in testbed for module testing, Routing and Persistence modules, and module dynamics support for lazy loading of reactant-share applications.\\n\\n### Service Discovery / Communications\\n\\nSince reactant-share uses [data-transport](http://github.com/unadlib/data-transport), reactant-share supports almost all the transports supported by data-transport.The client app and the server app, whichever is loaded first, the client app will wait for the server app to finish starting and get all the initial application state from it.\\n\\nUsing the actor model in the client app to design spawn(), we can do `spawn(counterModule, \'increase\', [])` to let the server app proxy the execution of the module method and respond and sync both the state and the result back to the client app.\\n\\nBut if we need direct communication between the client app and the server app, then we need to use the `PortDetector` module.\\n\\n```ts\\nclass Counter {\\n  constructor(public portDetector: PortDetector) {\\n    this.portDetector.onServer(async (transport) => {\\n      const result = await transport.emit(\\"test\\", 42);\\n      // result should be `hello, 42`\\n    });\\n    this.portDetector.onClient((transport) => {\\n      transport.listen(\\"test\\", (num) => `hello, ${num}`);\\n    });\\n  }\\n}\\n```\\n\\n### Tracking/Debugging\\n\\nSince reactant-share is based on Redux, it fully supports Redux DevTools, and the immutable time travel that Redux brings will make debugging easy.\\n\\n### Fault Tolerance / Data Consistency\\n\\nSince state synchronization after the client app uses `spawn()` to get the server app proxy to execute each time may cause it to be out of order in edge cases for various reasons, reactant-share integrates `reactant-last-action`, which provides sequence markers to keep If the client app receives a synchronized action that checks for an exception in the sequence, the client app will launch a full state synchronization to correct the action sequence.\\n\\nIn addition, when the browser does not support the Worker API, reactant-share will perform a graceful degradation (e.g. SharedWorker mode -> Shared-Tab mode -> SPA mode).\\n\\n### Isolation\\n\\nRegardless of modes such as Shared-Tab, SharedWorker, each application instance runs in isolation and their basic interactions can only be triggered by `spawn()` to synchronize state.\\n\\n### Configuration\\n\\nreactant-share provides CLI, you just need to run `npx reactant-cli init shared-worker-example -t shared-worker` to get a project of reactant-share with SharedWorker mode. If you want to change its mode, you just need to change the configuration of `createSharedApp()`.\\n\\n```diff\\ncreateSharedApp({\\n  modules: [],\\n  main: AppView,\\n  render,\\n  share: {\\n    name: \'ReactantExampleApp\',\\n    port: \'client\',\\n-   port: \'client\',\\n-   type: \'SharedWorker\',\\n-   workerURL: \'worker.bundle.js\',\\n+   type: \'SharedTab\',\\n    workerURL: \'worker.bundle.js\',\\n  },\\n}).then((app) => {\\n  app.bootstrap(document.getElementById(\'app\'));\\n});\\n```\\n\\nWith that, we can quickly turn SharedWorker mode into SharedTab mode.\\n\\n### Transport/Performance\\n\\nSince the client app only renders and receives synchronized state. So the client app keeps running smoothly when the size of each dispatch update state does not exceed 50M. reactant uses [Mutative Patch](https://github.com/unadlib/mutative) to update, usually this patch will be very small and reactant also does DEV checking for patch minimization updates. In fact, in most scenarios, the patch will not be that large.\\n\\n| Update state size         | Volume of data | Deserialization |\\n| ------------------------- | -------------- | --------------- |\\n| 30 Array \\\\* 1,000 items   | 1.4 M          | 14 ms           |\\n| 30 Array \\\\* 1,0000 items  | 14 M           | 130 ms          |\\n| 1000 Array \\\\* 1,000 items | 46 M           | 380 ms          |\\n\\n> Notebook: 1 GHz Intel Core M / 8 GB 1600 MHz DDR3\\n\\nbenchmarking of the reactant-share module with [derived data cache](/docs/api/reactant-module/modules/decorators_computed)\\n\\n| Number of modules and states | Total number of states | Each state update |\\n| ---------------------------- | ---------------------- | ----------------- |\\n| 100 modules \\\\* 20 states     | 2,000                  | 3 ms              |\\n| 200 modules \\\\* 30 states     | 6,000                  | 9 ms              |\\n| 300 modules \\\\* 100 states    | 30,000                 | 44 ms             |\\n\\n> Notebook: 1 GHz Intel Core M / 8 GB 1600 MHz DDR3\\n\\nTherefore, reactant-share still performs well in large projects.\\n\\n### Complexity\\n\\nWhether it\'s practicing [clean architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html), [DDD](https://en.wikipedia.org/wiki/Domain-driven_design), OOP or even FP, reactant-share has more openness to architect highly complex projects at will. reactant-share provides a few optional features, but the only one that shouldn\'t be missed is DI. reactant-share\'s DI is inspired by Angular, and it is very similar to Angular\'s DI. The complexity of coding that comes with architectural design is often determined by the final specification of the practice, but reactant-share hopes to help with such complex architectural design at the framework level.\\n\\n### Security\\n\\nFor reactant-share applications, the communication between server/client only serializes and deserializes state and parameters, so it is almost impossible to cause framework-level security issues. Of course, enabling https and using[Subresource Integrity](https://developer.mozilla.org/zh-CN/docs/Web/Security/Subresource_Integrity) are both necessary for any project that values front-end security, and we should also be concerned about [XSS security](https://reactjs.org/docs/dom-elements.html#style) in React documentation.\\n\\n### Testing\\n\\nreactant-share provides `testBed()` to facilitate module testing. For example,\\n\\n```ts\\nconst { instance } = testBed({\\n  main: Counter,\\n  modules: [],\\n});\\n```\\n\\nFor integration testing of server app/client app interactions, reactant-share also provides `mockPairTransports()` for mock transport.\\n\\n```ts\\nconst transports = mockPairTransports();\\n\\ncreateSharedApp({\\n  modules: [],\\n  main: AppView,\\n  render,\\n  share: {\\n    name: \\"SharedWorkerApp\\",\\n    port: \\"client\\",\\n    type: \\"SharedWorker\\",\\n    transports: {\\n      client: transports[0],\\n    },\\n  },\\n}).then((app) => {\\n  const clientApp = app;\\n  // render only\\n  app.bootstrap(document.getElementById(\\"app\\"));\\n});\\n\\ncreateSharedApp({\\n  modules: [],\\n  main: AppView,\\n  render: () => {\\n    //\\n  },\\n  share: {\\n    name: \\"SharedWorkerApp\\",\\n    port: \\"server\\",\\n    type: \\"SharedWorker\\",\\n    transports: {\\n      client: transports[1],\\n    },\\n  },\\n}).then((app) => {\\n  const serverApp = app;\\n  // render less\\n});\\n```\\n\\nAfter mocking transport like this, `clientApp` and `serverApp` can be easily tested for integration.\\n\\n## APIs\\n\\n- `@injectable()`\\n\\nYou can use `@injectable()` to decorate a module that can be injected and then use the `emitDecoratorMetadata` using TypeScript, or `@inject()` to inject the dependency.\\n\\n- `@state`\\n\\n`@state` is used to decorate a class property that will create a reducer for Redux.\\n\\n- `@action`\\n\\nIt updates the redux state with mutations via the class method.\\n\\n```ts\\nclass Todo {\\n  @state\\n  list: { text: string }[] = [];\\n\\n  @action\\n  addTodo(text: string) {\\n    this.list.push({ text });\\n  }\\n}\\n```\\n\\n- `ViewModule`/`useConnector()`\\n\\n`ViewModule` is a view module with a component, which is completely different from React class component. The component of `ViewModule` is a function component that is used for the state connection between the module and the UI (using `useConnector()`) and for the application view bootstrap.\\n\\n- `spawn()`\\n\\n`spawn()` transfers class methods execution from the client app to the server app and synchronizes the state to all client apps. It is inspired by the Actor model, but unlike other actor models, reactant-share\'s `spawn()` does not create new threads.\\n\\n- `createSharedApp()`\\n\\nreactant-share supports multiple modes, and you can use `createSharedApp()` to create multiple different Shared Web Apps that interact with each other via transport APIs.\\n\\n## Q&A\\n\\n- Can reactant-share completely solve the complexity of the architecture?\\n\\nAlthough reactant-share tries to reduce some complexity at the framework level, the complexity of large applications does not depend entirely on the framework itself, so even using reactant-share to architect a large project does not completely guarantee that it is absolutely clean, efficient, and maintainable. It involves testing strategy, code specification, CI/CD, development process, module design, and many other point.\\n\\nBut in terms of module model and shared model, reactant-share already provides as clean a design as possible. If you are interested in [reactant-share](https://github.com/unadlib/reactant/tree/master/packages/reactant-share), you can try it quickly.\\n\\n- Does reactant-share have no cons at all? Are there any limitations to using it?\\n\\nreactant-share is a framework for building Shared Web Apps. But such a model is not free, and it will face performance issues with data transfer (The high maintenance cost of the SharedArrayBuffer has forced us to abandon it for now as well. In fact this is a problem caused by the fact that JS \\"multithreading\\" does not share memory efficiently).\\n\\nAlthough Shared Web Apps lets the client App run in a render-only client thread, it introduces the additional overhead of synchronous state transfer. We must ensure that it is lightweight and efficient enough. While reactant-share does state patch based on [Mutative](https://github.com/unadlib/mutative), it is always difficult to ensure that each patch is minimally updated.\\n\\nreactant-share provides a development option `enablePatchesChecker`. In development mode, it is enabled by default. Any mutation operation that is not a valid mutation will be alerted, usually eliminating the alert, and reactant-share will try to keep the update size as minimal as possible.\\n\\n## Conclusion\\n\\nFront-end frameworks and architectures are always evolving. With full Worker support in modern browsers and an increasing number of multi-core CPU devices, we have reached a mature stage in our exploration of some multi-threaded running Web Apps. We have reasons to believe that the future Web App will be designed with lower complexity and run smoothly with multiple threads. It can fully utilize the user\'s device resources and give the user a good experience, and the developer does not need to have too many multi-threaded programming burden.\\n\\nThis is what reactant-share wants to try and work on.\\n\\nIf you think reactant-share is interesting, feel free to give it a star.\\n\\nRepo: [reactant](https://github.com/unadlib/reactant)"},{"id":"/2020/08/09/reactant-a-framework-for-building-react-web-applications","metadata":{"permalink":"/blog/2020/08/09/reactant-a-framework-for-building-react-web-applications","editUrl":"https://github.com/unadlib/reactant/tree/master/website/blog/2020-08-09-reactant-a-framework-for-building-react-web-applications.md","source":"@site/blog/2020-08-09-reactant-a-framework-for-building-react-web-applications.md","title":"Reactant - A framework for building React web applications","description":"Motivation","date":"2020-08-09T00:00:00.000Z","formattedDate":"August 9, 2020","tags":[{"label":"reactant","permalink":"/blog/tags/reactant"}],"readingTime":6.515,"hasTruncateMarker":false,"authors":[{"name":"unadlib"}],"frontMatter":{"title":"Reactant - A framework for building React web applications","author":"unadlib","tags":["reactant"]},"prevItem":{"title":"How to make Web application support multiple browser windows","permalink":"/blog/2021/10/03/how-to-make-web-application-support-multiple-browser-windows"}},"content":"## Motivation\\n\\nReact is a JavaScript library for building user interfaces, but when we want to develop applications based on React, we often have to do a lot of building configuration and many other libraries\' choices(Picking and learning a React state library and router library, etc.). We also need to consider how our business logic should be abstracted and structured. Everyone who uses React practices their own perception of how React is built, but it doesn\'t allow us to quickly focus on the business logic itself. As the application business grows in size, we urgently need a framework that can be easily understood and maintained.\\n\\nAnd for the structured design of the application\'s business logic, separation of concern is a good idea. It requires clear boundaries of liability to avoid low maintainability when UI logic and business logic are mixed. We always want to focus on business logic when building applications. It is one of the business core values of an application. We want it to be easy to maintain, and test. Redux remains the most popular state library in React. It is full accord with immutable principles for React. Redux is just a state container, and we\'re often at a loss for how to really manage those states. We need a framework for scalable, loosely coupled and easily maintainable React applications.\\n\\nReact is an excellent UI library, but even if React has hooks, it\'s still not enough to solve all the problems we have in developing large applications. We still don\'t have module dependency injection, we don\'t have a good AOP practice model, we don\'t have a good abstraction possibility to minimize the module system, we also can\'t better practice DDD, and so on. These are all issues beyond React that we need to think about and solve.\\n\\nOf course, I\'m not going to discuss whether React needs to provide these features, it\'s good enough as it is. What is really being discussed is: Do we need a React framework?\\n\\nIn order to solve these problems, Reactant was created. It\'s a framework for React.\\n\\n## Introducing Reactant\\n\\nReactant efficiently builds extensible and maintainable React applications. Reactant is based on TypeScript, but it supports both TypeScript and JavaScript (for better development experience, TypeScript is recommended). Reactant provides dependency injection, modular model, immutable state management, module dynamization, and more. It is pluggable and highly testable. Not only is it able to quickly build a React application (Web and Native Mobile), it also brings some new React development experiences. With Reactant, you can still embrace OOP, FP, FRP, and other programming paradigms, and you can still embrace the entire React ecosystem.\\n\\nReactant is inspired by quite a few good features of Angular, for example, Reactant provides a similar dependency injection API to Angular. But Reactant is not a copy of Angular programming ideas on the React framework, Reactant provides fewer and more concise API, It is sufficient for all programming scenarios for developing applications.\\n\\nIt is a complete architecture of React.\\n\\n## What problem was solved?\\n\\nReactant is a progressive framework. In the process of developing applications from simple to complex, it can provide the appropriate features at each stage, based on its system architecture design can also be a variety of gradual and smooth upgrade and evolution.\\n\\n### Better Immutable State Management\\n\\nReact advocates immutable state type management, and Redux clearly fits this. But the fact is that simple mutation update operations like MobX are increasingly in line with current trends. Therefore Reactant provides a new immutable state management model based on Redux and [Mutative](https://github.com/unadlib/mutative), which incorporates similar API elements of MobX. And more importantly, it still maintains the immutability of state.\\n\\n```ts\\n@injectable()\\nclass TodoList {\\n  @state\\n  list: Todo[] = [];\\n\\n  @action\\n  addTodo(text: string) {\\n    this.list.push({ text, completed: false });\\n  }\\n}\\n```\\n\\n### Modularization\\n\\nWhile it seems that the entire React community is increasingly pushing functional programming after React introduced Hooks, functional programming may not be the best solution in complex enterprise businesses. Of course, Hooks does bring good solutions for decoupling rendering logic, if only in building UI. But in the realm of business logic, we have better options, especially in an enterprise application where multiple developers collaborate on development, and indeed class-based module design often brings parallel development and ease of maintenance and testing. class aren\'t evil, it\'s the wrong module design that\'s evil.\\n\\nTherefore, Reactant advocates the use of classes for module implementation. And more importantly, Reactant defines Service Module, View Module, Plugin Module, so that their responsibilities and boundaries are more clearly defined. Any module can be a Service Module, it is flexible, and the architecture of many different applications can be based on it; View Module must define the view component bound to the current module, it is the rendering entry point for the view module, and the state of the modules it depends on will be injected intuitively into Props via `useConnector`; Plugin Module is a complete Redux middleware and Context re-encapsulation, it provides a model for designing plug-ins, which makes the plug-in API simplicity is possible.\\n\\nIn addition, Reactant provides a complete dependency injection API. It implements DI based on TypeScript decorator metadata, making it particularly easy to use.\\n\\n```tsx\\n@injectable()\\nclass AppView extends ViewModule {\\n  constructor(public counter: Counter) {\\n    super();\\n  }\\n\\n  component() {\\n    const count = useConnector(() => this.counter.count);\\n    return (\\n      <button\\n      \\ttype=\\"button\\"\\n      \\tonClick={() => this.counter.increase()}>\\n        {count}\\n      </button>\\n    );\\n  }\\n}\\n```\\n\\n### Easy and Lightweight\\n\\nReactant has no more than 30 APIs and even fewer than 15 core APIs. Without much familiarity and adaptation, you can quickly get started with Reactant and use it to develop any complex React application.\\n\\nThe gzipped Reactant core code file is less than 50KB at runtime. Reactant not only supports code splitting, but it also supports the dynamic injection of modules, which is very useful for many large applications to run minimally.\\n\\n### Embracing React Ecosystem\\n\\nReactant is open, it abstracts some models based on React and Redux. These APIs bring convenience to developers, it also supports the ecosystem of React and Redux. Many superb third-party libraries can be used directly on Reactant or re-encapsulated, which brings infinite possibilities to the use of Reactant.\\n\\n### Better Development Experience\\n\\nReactant provides a simpler routing module (reactant-router) and a persistence module (reactant-storage). If necessary, you can develop any module based on the Reactant plug-in module you need a better module API.\\n\\nIn development debugging, `devOptions` supports both `autoFreeze` and `reduxDevTools` options. When enable `autoFreeze`, any changing operation without the `@action` decorated method will throw errors. And when enable `reduxDevTools`, Reactant will activate the support for Redux DevTools.\\n\\nReactant will do more features that improve the development experience.\\n\\n### Benchmark Performance\\n\\nIn benchmark performance tests between Reactant and MobX+React, Reactant has the edge in startup time and derived computing, while MobX+React has the edge in value updates. And overall, the performance difference is not particularly significant. Because Reactant is based on [Mutative](https://github.com/unadlib/mutative), Reactant also provides a performance-optimized solution when encountering a very few extreme performance bottlenecks. \\n\\nReactant is committed to maintaining good performance while continuing to build a productive React framework.\\n\\n## Conclusion\\n\\nReactant was originally intended to help React developers be able to efficiently build and develop a maintainable and testable application. Reactant\'s goal is to minimize the system life cost and maximize developer productivity.\\n\\nAs a brand new framework, Reactant has only been in development for a few months and there is still a lot of work to be done, including the build tools, development tools, server-side rendering, and the React Native CLI, and so on. \\n\\nIf you are already familiar with React, then you just need to quickly read the Reactant part of the documentation and use the Reactant CLI to quickly build the Reactant application, you will start your new React application development experience.\\n\\nRepo\uff1a\\n\\nhttps://github.com/unadlib/reactant"}]}')}}]);