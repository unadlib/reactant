"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[28],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(t),b=r,m=d["".concat(l,".").concat(b)]||d[b]||u[b]||o;return t?a.createElement(m,i(i({ref:n},s),{},{components:t})):a.createElement(m,i({ref:n},s))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:4},i="Basic Dependency Injection",c={unversionedId:"basic-tutorial/base-di",id:"basic-tutorial/base-di",title:"Basic Dependency Injection",description:"Reactant provides dependency injection, which supports TypeScript(also supports JavaScript), and we recommend the experimentalDecorators feature based on TypeScript, as well as Reflect.metadata to record the dependency injection metadata.",source:"@site/docs/basic-tutorial/base-di.md",sourceDirName:"basic-tutorial",slug:"/basic-tutorial/base-di",permalink:"/docs/basic-tutorial/base-di",draft:!1,editUrl:"https://github.com/unadlib/reactant/tree/master/website/docs/basic-tutorial/base-di.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"View Module",permalink:"/docs/basic-tutorial/view-module"},next:{title:"Advanced Guides",permalink:"/docs/category/advanced-guides"}},l={},p=[{value:"@injectable()",id:"injectable",level:2},{value:"@injectable() for JavaScript",id:"injectable-for-javascript",level:3},{value:"@inject()",id:"inject",level:2},{value:"@optional()",id:"optional",level:2}],s={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basic-dependency-injection"},"Basic Dependency Injection"),(0,r.kt)("p",null,"Reactant provides dependency injection, which supports TypeScript(also supports JavaScript), and we recommend the ",(0,r.kt)("inlineCode",{parentName:"p"},"experimentalDecorators")," feature based on TypeScript, as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"Reflect.metadata")," to record the dependency injection metadata."),(0,r.kt)("p",null,"To enable experimental support for decorators, you must enable the experimentalDecorators compiler option either on the command line or in your tsconfig.json:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "experimentalDecorators": true\n  }\n}\n')),(0,r.kt)("h2",{id:"injectable"},"@injectable()"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"@injectable()"),", Reactant to turn the current module into an injectable module."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@injectable()\nclass Foo {}\n\n@injectable()\nclass Bar {\n  constructor(public foo: Foo) {}\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If it does not depend on any other module, in fact, the ",(0,r.kt)("inlineCode",{parentName:"p"},"@injectable()")," modifier of the current module can be omitted, and Reactant turns it into an injectable module and injects it automatically when the ",(0,r.kt)("inlineCode",{parentName:"p"},"createApp")," runs.")),(0,r.kt)("h3",{id:"injectable-for-javascript"},"@injectable() for JavaScript"),(0,r.kt)("p",null,"Since JavaScript has no better features to support the handling of dependency injections similar to TypeScript decorators, using Reactant's dependency injections in JavaScript can only be done using ",(0,r.kt)("inlineCode",{parentName:"p"},"@injectable()")," with the information of the dependency injection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"@injectable()\nclass Foo {}\n\n@injectable({\n  deps: [Foo],\n})\nclass Bar {\n  constructor(foo) {}\n}\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/reactant-module/modules/decorators_injectable"},"@injectable()")," API doc for more information."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Be sure to install ",(0,r.kt)("inlineCode",{parentName:"p"},"@babel/plugin-propose-decorators")," and configure the babel settings correctly.")),(0,r.kt)("h2",{id:"inject"},"@inject()"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"@inject()")," and bring its corresponding identifier parameter as dependency injection management."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Bar {\n  text: string;\n}\n\n@injectable()\nclass Foo {\n  constructor(@inject('Bar') public bar: Bar) {}\n\n  get text() {\n    return this.bar.text;\n  }\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It does NOT support JavaScript, and the equivalent is written as:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"@injectable({\n  deps: [{ provide: 'Bar' }],\n})\nclass Foo {\n  constructor(bar) {\n    this.bar = bar;\n  }\n\n  get text() {\n    return this.bar.text;\n  }\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When you need to depend on injecting multiple instances of the same class, you can consider using different injection tokens, for example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@injectable()\nclass Bar {}\n\n@injectable()\nclass Foo {\n  constructor(@inject('Bar0') public bar: Bar) {}\n}\n\n@injectable()\nclass AppView extends ViewModule {\n  constructor(@inject('Bar1') public bar: Bar, public foo: Foo) {}\n}\n\nconst app = createApp({\n  main: AppView,\n  modules: [\n    {\n      provide: 'Bar0',\n      useClass: Bar,\n    },\n    {\n      provide: 'Bar1',\n      useClass: Bar,\n    },\n  ]\n  render,\n});\n\nexpect(app.instance.bar !== app.instance.foo.bar).toBe(true);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AppView")," dependency bar is a different instance from ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo")," dependency bar"),(0,r.kt)("h2",{id:"optional"},"@optional()"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"optional()")," with a dependency identifier that you can use to inject an optional module."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you only need yourself as a dependency identifier, then you can abbreviate ",(0,r.kt)("inlineCode",{parentName:"p"},"@optional(Bar) public bar?: Bar")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"@optional() public bar?: Bar"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Bar {\n  text: string;\n}\n\n@injectable()\nclass Foo {\n  constructor(@optional('Bar') public bar?: Bar) {}\n\n  get text() {\n    return this.bar?.text;\n  }\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It does NOT support JavaScript, and the equivalent is written as:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"@injectable({\n  deps: [{ provide: 'Bar', optional: true }],\n})\nclass Foo {\n  constructor(bar) {\n    this.bar = bar;\n  }\n\n  get text() {\n    return this.bar === null || this.bar === undefined\n      ? undefined\n      : this.bar.text;\n  }\n}\n")))}u.isMDXComponent=!0}}]);